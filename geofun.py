# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _geofun
else:
    import _geofun

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def deg_to_rad(degs):
    return _geofun.deg_to_rad(degs)

def rad_to_deg(rads):
    return _geofun.rad_to_deg(rads)

def m_to_nm(meters):
    return _geofun.m_to_nm(meters)

def nm_to_m(miles):
    return _geofun.nm_to_m(miles)

def sqr(x):
    return _geofun.sqr(x)

def reduced_latitude(geodetic_latitude):
    return _geofun.reduced_latitude(geodetic_latitude)

def angle_pipi(angle):
    return _geofun.angle_pipi(angle)

def angle_2pi(angle):
    return _geofun.angle_2pi(angle)

def angle_pi2pi2(angle):
    return _geofun.angle_pi2pi2(angle)

def angle_diff(angle1, angle2):
    return _geofun.angle_diff(angle1, angle2)

def floats_equal(value1, value2):
    return _geofun.floats_equal(value1, value2)

def float_smaller(value1, value2):
    return _geofun.float_smaller(value1, value2)
class IndexError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, i):
        _geofun.IndexError_swiginit(self, _geofun.new_IndexError(i))

    def what(self):
        return _geofun.IndexError_what(self)
    __swig_destroy__ = _geofun.delete_IndexError

# Register IndexError in _geofun:
_geofun.IndexError_swigregister(IndexError)
cvar = _geofun.cvar
a = cvar.a
b = cvar.b
r = cvar.r
f = cvar.f
pi = cvar.pi
two_pi = cvar.two_pi
half_pi = cvar.half_pi
sqa = cvar.sqa
sqb = cvar.sqb

class EarthModelError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _geofun.EarthModelError_swiginit(self, _geofun.new_EarthModelError())

    def what(self):
        return _geofun.EarthModelError_what(self)
    __swig_destroy__ = _geofun.delete_EarthModelError

# Register EarthModelError in _geofun:
_geofun.EarthModelError_swigregister(EarthModelError)

class AngleModeError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _geofun.AngleModeError_swiginit(self, _geofun.new_AngleModeError())

    def what(self):
        return _geofun.AngleModeError_what(self)
    __swig_destroy__ = _geofun.delete_AngleModeError

# Register AngleModeError in _geofun:
_geofun.AngleModeError_swigregister(AngleModeError)

class Simple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _geofun.delete_Simple

    def __getitem__(self, i):
        return _geofun.Simple___getitem__(self, i)

    def __len__(self):
        return _geofun.Simple___len__(self)

    def __init__(self):
        _geofun.Simple_swiginit(self, _geofun.new_Simple())

# Register Simple in _geofun:
_geofun.Simple_swigregister(Simple)

class Complex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _geofun.delete_Complex

    def __getitem__(self, i):
        return _geofun.Complex___getitem__(self, i)

    def __len__(self):
        return _geofun.Complex___len__(self)

# Register Complex in _geofun:
_geofun.Complex_swigregister(Complex)

class Coord(Simple):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _geofun.Coord_swiginit(self, _geofun.new_Coord(*args))

    def __assign__(self, value):
        return _geofun.Coord___assign__(self, value)

    def __neg__(self):
        return _geofun.Coord___neg__(self)

    def __eq__(self, coord):

        if args[0] is None:
            return False


        return _geofun.Coord___eq__(self, coord)


    def __imul__(self, value):
        return _geofun.Coord___imul__(self, value)

    def __iadd__(self, value):
        return _geofun.Coord___iadd__(self, value)

    def __isub__(self, value):
        return _geofun.Coord___isub__(self, value)

    def __getitem__(self, i):
        return _geofun.Coord___getitem__(self, i)

    def __len__(self):
        return _geofun.Coord___len__(self)

    def __add__(self, coord):
        return _geofun.Coord___add__(self, coord)

    def __sub__(self, coord):
        return _geofun.Coord___sub__(self, coord)

    def __mul__(self, value):
        return _geofun.Coord___mul__(self, value)

    def dot(self, coord):
        return _geofun.Coord_dot(self, coord)

    def cross(self, coord):
        return _geofun.Coord_cross(self, coord)

    def get_x(self):
        return _geofun.Coord_get_x(self)

    def get_y(self):
        return _geofun.Coord_get_y(self)

    def set_x(self, value):
        return _geofun.Coord_set_x(self, value)

    def set_y(self, value):
        return _geofun.Coord_set_y(self, value)

    def __str__(self):
        return _geofun.Coord___str__(self)

    def __repr__(self):
        return _geofun.Coord___repr__(self)
    __swig_destroy__ = _geofun.delete_Coord

# Register Coord in _geofun:
_geofun.Coord_swigregister(Coord)


def __truediv__(value, coord):
    return _geofun.__truediv__(value, coord)
class EarthModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _geofun.delete_EarthModel

    def cartesian_deltas(self, lat):
        return _geofun.EarthModel_cartesian_deltas(self, lat)

    def __init__(self):
        _geofun.EarthModel_swiginit(self, _geofun.new_EarthModel())

# Register EarthModel in _geofun:
_geofun.EarthModel_swigregister(EarthModel)

class Sphere(EarthModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cartesian_deltas(self, lat):
        return _geofun.Sphere_cartesian_deltas(self, lat)

    def __init__(self):
        _geofun.Sphere_swiginit(self, _geofun.new_Sphere())
    __swig_destroy__ = _geofun.delete_Sphere

# Register Sphere in _geofun:
_geofun.Sphere_swigregister(Sphere)

class WGS84(EarthModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cartesian_deltas(self, lat):
        return _geofun.WGS84_cartesian_deltas(self, lat)

    def __init__(self):
        _geofun.WGS84_swiginit(self, _geofun.new_WGS84())
    __swig_destroy__ = _geofun.delete_WGS84

# Register WGS84 in _geofun:
_geofun.WGS84_swigregister(WGS84)


def get_earth_model():
    return _geofun.get_earth_model()

def set_earth_model(model_name):
    return _geofun.set_earth_model(model_name)

def set_angle_mode(angle_mode):
    return _geofun.set_angle_mode(angle_mode)
am_radians = _geofun.am_radians
am_degrees = _geofun.am_degrees

def from_rads(value):
    return _geofun.from_rads(value)

def to_rads(value):
    return _geofun.to_rads(value)

def to_degs(value):
    return _geofun.to_degs(value)

def from_degs(value):
    return _geofun.from_degs(value)
class Vector(Simple):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _geofun.Vector_swiginit(self, _geofun.new_Vector(*args))

    def __assign__(self, vector):
        return _geofun.Vector___assign__(self, vector)

    def __neg__(self):
        return _geofun.Vector___neg__(self)

    def __eq__(self, vector):

        if args[0] is None:
            return False


        return _geofun.Vector___eq__(self, vector)


    def __imul__(self, value):
        return _geofun.Vector___imul__(self, value)

    def __iadd__(self, vector):
        return _geofun.Vector___iadd__(self, vector)

    def __isub__(self, vector):
        return _geofun.Vector___isub__(self, vector)

    def __mul__(self, value):
        return _geofun.Vector___mul__(self, value)

    def __add__(self, vector):
        return _geofun.Vector___add__(self, vector)

    def __sub__(self, vector):
        return _geofun.Vector___sub__(self, vector)

    def __getitem__(self, i):
        return _geofun.Vector___getitem__(self, i)

    def __len__(self):
        return _geofun.Vector___len__(self)

    def __gt__(self, vector):
        return _geofun.Vector___gt__(self, vector)

    def __lt__(self, vector):
        return _geofun.Vector___lt__(self, vector)

    def __ge__(self, vector):
        return _geofun.Vector___ge__(self, vector)

    def __le__(self, vector):
        return _geofun.Vector___le__(self, vector)

    def cartesian(self):
        return _geofun.Vector_cartesian(self)

    def set_cartesian(self, coord):
        return _geofun.Vector_set_cartesian(self, coord)

    def dot(self, vector):
        return _geofun.Vector_dot(self, vector)

    def cross(self, vector):
        return _geofun.Vector_cross(self, vector)

    def get_r(self):
        return _geofun.Vector_get_r(self)

    def set_r(self, value):
        return _geofun.Vector_set_r(self, value)

    def get_a(self):
        return _geofun.Vector_get_a(self)

    def set_a(self, value):
        return _geofun.Vector_set_a(self, value)

    def __str__(self):
        return _geofun.Vector___str__(self)

    def __repr__(self):
        return _geofun.Vector___repr__(self)
    __swig_destroy__ = _geofun.delete_Vector

# Register Vector in _geofun:
_geofun.Vector_swigregister(Vector)


def __mul__(*args):
    return _geofun.__mul__(*args)
class Position(Simple):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _geofun.Position_swiginit(self, _geofun.new_Position(*args))

    def __assign__(self, *args):
        return _geofun.Position___assign__(self, *args)

    def __eq__(self, *args):

        if args[0] is None:
            return False


        return _geofun.Position___eq__(self, *args)


    def __isub__(self, vector):
        return _geofun.Position___isub__(self, vector)

    def __sub__(self, *args):
        return _geofun.Position___sub__(self, *args)

    def __getitem__(self, i):
        return _geofun.Position___getitem__(self, i)

    def __lt__(self, position):
        return _geofun.Position___lt__(self, position)

    def __le__(self, position):
        return _geofun.Position___le__(self, position)

    def __gt__(self, position):
        return _geofun.Position___gt__(self, position)

    def __ge__(self, position):
        return _geofun.Position___ge__(self, position)

    def __cmp__(self, position):
        return _geofun.Position___cmp__(self, position)

    def __len__(self):
        return _geofun.Position___len__(self)

    def get_lat(self):
        return _geofun.Position_get_lat(self)

    def get_lon(self):
        return _geofun.Position_get_lon(self)

    def set_lat(self, value):
        return _geofun.Position_set_lat(self, value)

    def set_lon(self, value):
        return _geofun.Position_set_lon(self, value)

    def set_latlon(self, latitude, longitude):
        return _geofun.Position_set_latlon(self, latitude, longitude)

    def cartesian_deltas(self):
        return _geofun.Position_cartesian_deltas(self)

    def __iadd__(self, *args):
        return _geofun.Position___iadd__(self, *args)

    def __add__(self, *args):
        return _geofun.Position___add__(self, *args)

    def __str__(self):
        return _geofun.Position___str__(self)

    def __repr__(self):
        return _geofun.Position___repr__(self)
    __swig_destroy__ = _geofun.delete_Position

# Register Position in _geofun:
_geofun.Position_swigregister(Position)

class Line(Complex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _geofun.Line_swiginit(self, _geofun.new_Line(*args))

    def __assign__(self, line):
        return _geofun.Line___assign__(self, line)

    def __getitem__(self, i):
        return _geofun.Line___getitem__(self, i)

    def __len__(self):
        return _geofun.Line___len__(self)

    def get_p1(self):
        return _geofun.Line_get_p1(self)

    def get_p2(self):
        return _geofun.Line_get_p2(self)

    def get_v(self):
        return _geofun.Line_get_v(self)

    def set_p1(self, position):
        return _geofun.Line_set_p1(self, position)

    def set_p2(self, position):
        return _geofun.Line_set_p2(self, position)

    def set_v(self, vector):
        return _geofun.Line_set_v(self, vector)

    def min_lat(self):
        return _geofun.Line_min_lat(self)

    def max_lat(self):
        return _geofun.Line_max_lat(self)

    def min_lon(self):
        return _geofun.Line_min_lon(self)

    def max_lon(self):
        return _geofun.Line_max_lon(self)

    def get_length(self):
        return _geofun.Line_get_length(self)

    def intersects(self, line):
        return _geofun.Line_intersects(self, line)

    def intersection(self, line):
        return _geofun.Line_intersection(self, line)

    def __str__(self):
        return _geofun.Line___str__(self)

    def __repr__(self):
        return _geofun.Line___repr__(self)
    __swig_destroy__ = _geofun.delete_Line

# Register Line in _geofun:
_geofun.Line_swigregister(Line)

class Arc(Complex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _geofun.Arc_swiginit(self, _geofun.new_Arc(*args))

    def __assign__(self, arc):
        return _geofun.Arc___assign__(self, arc)

    def __iadd__(self, vector):
        return _geofun.Arc___iadd__(self, vector)

    def __getitem__(self, i):
        return _geofun.Arc___getitem__(self, i)

    def __len__(self):
        return _geofun.Arc___len__(self)

    def get_p1(self):
        return _geofun.Arc_get_p1(self)

    def get_p2(self):
        return _geofun.Arc_get_p2(self)

    def get_v(self):
        return _geofun.Arc_get_v(self)

    def get_r(self):
        return _geofun.Arc_get_r(self)

    def set_p1(self, position):
        return _geofun.Arc_set_p1(self, position)

    def set_p2(self, position):
        return _geofun.Arc_set_p2(self, position)

    def set_v(self, vector):
        return _geofun.Arc_set_v(self, vector)

    def set_r(self, vector):
        return _geofun.Arc_set_r(self, vector)

    def min_lat(self):
        return _geofun.Arc_min_lat(self)

    def max_lat(self):
        return _geofun.Arc_max_lat(self)

    def min_lon(self):
        return _geofun.Arc_min_lon(self)

    def max_lon(self):
        return _geofun.Arc_max_lon(self)

    def intersects(self, *args):
        return _geofun.Arc_intersects(self, *args)

    def intersection(self, *args):
        return _geofun.Arc_intersection(self, *args)
    __swig_destroy__ = _geofun.delete_Arc

# Register Arc in _geofun:
_geofun.Arc_swigregister(Arc)


def set_property(clss, name):
    getter = getattr(clss, "get_" + name)
    setter = getattr(clss, "set_" + name)
    setattr(clss, name, property(getter, setter))

set_property(Coord, 'x')
set_property(Coord, 'y')
set_property(Vector, 'a')
set_property(Vector, 'r')
set_property(Position, 'lat')
set_property(Position, 'lon')
set_property(Line, 'p1')
set_property(Line, 'p2')
set_property(Line, 'v')
set_property(Arc, 'p1')
set_property(Arc, 'p2')
set_property(Arc, 'v')
set_property(Arc, 'r')



